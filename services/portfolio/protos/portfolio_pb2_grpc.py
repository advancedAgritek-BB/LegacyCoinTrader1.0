# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import portfolio_pb2 as portfolio__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in portfolio_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PortfolioStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetState = channel.unary_unary(
                '/portfolio.Portfolio/GetState',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=portfolio__pb2.PortfolioStateResponse.FromString,
                _registered_method=True)
        self.UpdateState = channel.unary_unary(
                '/portfolio.Portfolio/UpdateState',
                request_serializer=portfolio__pb2.PortfolioStateRequest.SerializeToString,
                response_deserializer=portfolio__pb2.PortfolioStateResponse.FromString,
                _registered_method=True)
        self.RecordTrade = channel.unary_unary(
                '/portfolio.Portfolio/RecordTrade',
                request_serializer=portfolio__pb2.TradeRequest.SerializeToString,
                response_deserializer=portfolio__pb2.PositionResponse.FromString,
                _registered_method=True)
        self.UpdatePrice = channel.unary_unary(
                '/portfolio.Portfolio/UpdatePrice',
                request_serializer=portfolio__pb2.PriceUpdateRequest.SerializeToString,
                response_deserializer=portfolio__pb2.PositionResponse.FromString,
                _registered_method=True)
        self.ComputePnl = channel.unary_unary(
                '/portfolio.Portfolio/ComputePnl',
                request_serializer=portfolio__pb2.PnlRequest.SerializeToString,
                response_deserializer=portfolio__pb2.PnlResponse.FromString,
                _registered_method=True)
        self.CheckRisk = channel.unary_unary(
                '/portfolio.Portfolio/CheckRisk',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=portfolio__pb2.RiskCheckResponse.FromString,
                _registered_method=True)


class PortfolioServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordTrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputePnl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckRisk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PortfolioServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=portfolio__pb2.PortfolioStateResponse.SerializeToString,
            ),
            'UpdateState': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateState,
                    request_deserializer=portfolio__pb2.PortfolioStateRequest.FromString,
                    response_serializer=portfolio__pb2.PortfolioStateResponse.SerializeToString,
            ),
            'RecordTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordTrade,
                    request_deserializer=portfolio__pb2.TradeRequest.FromString,
                    response_serializer=portfolio__pb2.PositionResponse.SerializeToString,
            ),
            'UpdatePrice': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePrice,
                    request_deserializer=portfolio__pb2.PriceUpdateRequest.FromString,
                    response_serializer=portfolio__pb2.PositionResponse.SerializeToString,
            ),
            'ComputePnl': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputePnl,
                    request_deserializer=portfolio__pb2.PnlRequest.FromString,
                    response_serializer=portfolio__pb2.PnlResponse.SerializeToString,
            ),
            'CheckRisk': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckRisk,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=portfolio__pb2.RiskCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'portfolio.Portfolio', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('portfolio.Portfolio', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Portfolio(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/portfolio.Portfolio/GetState',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            portfolio__pb2.PortfolioStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/portfolio.Portfolio/UpdateState',
            portfolio__pb2.PortfolioStateRequest.SerializeToString,
            portfolio__pb2.PortfolioStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/portfolio.Portfolio/RecordTrade',
            portfolio__pb2.TradeRequest.SerializeToString,
            portfolio__pb2.PositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/portfolio.Portfolio/UpdatePrice',
            portfolio__pb2.PriceUpdateRequest.SerializeToString,
            portfolio__pb2.PositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ComputePnl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/portfolio.Portfolio/ComputePnl',
            portfolio__pb2.PnlRequest.SerializeToString,
            portfolio__pb2.PnlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckRisk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/portfolio.Portfolio/CheckRisk',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            portfolio__pb2.RiskCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
