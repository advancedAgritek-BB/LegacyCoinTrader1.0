name: CI/CD Pipeline

on:
  push:
    branches: [ main, v2-main ]
  pull_request:
    branches: [ main, v2-main ]

env:
  PYTHON_VERSION: "3.9"
  DOCKER_COMPOSE_VERSION: "2.15.1"

jobs:
  # Test all services individually
  test-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          "api-gateway",
          "trading-engine",
          "market-data",
          "strategy-engine",
          "portfolio",
          "execution",
          "token-discovery",
          "monitoring"
        ]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx redis

    - name: Run service-specific tests
      run: |
        cd services/${{ matrix.service }}
        python -m pytest tests/ -v --cov=services.${{ matrix.service }} --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }} coverage

  # Test integration between services
  integration-tests:
    runs-on: ubuntu-latest
    needs: test-services

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: legacy_coin_trader_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx redis psycopg2-binary

    - name: Wait for services to be ready
      run: |
        sleep 30

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --cov=services --cov-report=xml --cov-report=html

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: htmlcov/

  # Test data migration functionality
  data-migration-tests:
    runs-on: ubuntu-latest
    needs: test-services

    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: legacy_coin_trader_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio psycopg2-binary pandas

    - name: Create test data
      run: |
        mkdir -p test_data
        echo "id,symbol,side,amount,price,timestamp" > test_data/sample_trades.csv
        echo "test-1,BTC/USD,buy,0.01,50000.0,2024-01-01T00:00:00Z" >> test_data/sample_trades.csv

    - name: Run data migration tests
      run: |
        python -m pytest test_data_migration.py -v

  # Test frontend integration
  frontend-tests:
    runs-on: ubuntu-latest
    needs: test-services

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flask pytest pytest-cov

    - name: Run frontend tests
      run: |
        cd frontend
        python -m pytest tests/ -v --cov=. --cov-report=xml

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: test-services

    steps:
    - uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and test Docker images
  docker-build:
    runs-on: ubuntu-latest
    needs: [test-services, integration-tests]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build API Gateway
      uses: docker/build-push-action@v4
      with:
        context: ./services/api_gateway
        push: false
        tags: legacy-coin-trader/api-gateway:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Trading Engine
      uses: docker/build-push-action@v4
      with:
        context: ./services/trading_engine
        push: false
        tags: legacy-coin-trader/trading-engine:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker-compose config --quiet

  # Performance testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
    - uses: actions/checkout@v3

    - name: Set up k6
      uses: grafana/k6-action@v0.2.0
      with:
        k6-version: v0.42.0

    - name: Run performance tests
      run: |
        k6 run --out json=perf-results.json tests/performance/api_gateway_load_test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: perf-results.json

  # Deploy to staging (only on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-services, integration-tests, docker-build, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster legacy-coin-trader-staging --service api-gateway --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-staging --service trading-engine --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-staging --service market-data --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-staging --service strategy-engine --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-staging --service portfolio --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-staging --service execution --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-staging --service token-discovery --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-staging --service monitoring --force-new-deployment

  # Production deployment (manual trigger only)
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to production ECS
      run: |
        aws ecs update-service --cluster legacy-coin-trader-prod --service api-gateway --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-prod --service trading-engine --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-prod --service market-data --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-prod --service strategy-engine --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-prod --service portfolio --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-prod --service execution --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-prod --service token-discovery --force-new-deployment
        aws ecs update-service --cluster legacy-coin-trader-prod --service monitoring --force-new-deployment

    - name: Run production smoke tests
      run: |
        sleep 120  # Wait for services to start
        curl -f https://api.legacycointrader.com/health || exit 1
        curl -f https://api.legacycointrader.com/auth/service-tokens || exit 1