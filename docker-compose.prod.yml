---
version: '3.8'

# Production configuration
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # Production overrides for Redis
  redis:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    volumes:
      - redis_prod_data:/data
    environment:
      REDIS_MAXMEMORY: 256mb
      REDIS_MAXMEMORY_POLICY: allkeys-lru

  # Production overrides for API Gateway
  api-gateway:
    environment:
      GATEWAY_LOG_LEVEL: INFO
      GATEWAY_RATE_LIMIT_REQUESTS: 1000
      GATEWAY_RATE_LIMIT_WINDOW: 60
      HYBRID_FEATURE_FLAG_SOURCE: prod-config
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Production overrides for Trading Engine
  trading-engine:
    environment:
      TRADING_ENGINE_LOG_LEVEL: INFO
      TRADING_ENGINE_CYCLE_INTERVAL: 120
      TRADING_ENGINE_BATCH_SIZE: 25
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s

  # Production overrides for Market Data Service
  market-data:
    environment:
      MARKET_DATA_LOG_LEVEL: INFO
      MARKET_DATA_CACHE_SIZE: 1000
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s

  # Production overrides for Portfolio Service
  portfolio:
    environment:
      PORTFOLIO_LOG_LEVEL: INFO
      PORTFOLIO_BACKUP_INTERVAL: 3600
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Production overrides for Strategy Engine
  strategy-engine:
    environment:
      STRATEGY_ENGINE_LOG_LEVEL: INFO
      STRATEGY_ENGINE_MODEL_CACHE_SIZE: 100
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.5'
        reservations:
          memory: 512M
          cpus: '0.75'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s

  # Production overrides for Token Discovery Service
  token-discovery:
    environment:
      TOKEN_DISCOVERY_LOG_LEVEL: INFO
      TOKEN_DISCOVERY_MAX_CONCURRENT_SCANS: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s

  # Production overrides for Execution Service
  execution:
    environment:
      EXECUTION_LOG_LEVEL: INFO
      EXECUTION_MAX_RETRIES: 3
      EXECUTION_RATE_LIMIT_ENABLED: 'true'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Production overrides for Monitoring Service
  monitoring:
    environment:
      MONITORING_LOG_LEVEL: INFO
      MONITORING_METRICS_RETENTION: 7d
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Production overrides for Frontend
  frontend:
    environment:
      FLASK_ENV: production
      FLASK_DEBUG: '0'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Production database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: legacy_coin_trader_prod
      POSTGRES_USER: ${DB_USER:-prod_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_me_in_production}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 300s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-prod_user} -d legacy_coin_trader_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Load balancer and reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - api-gateway
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager

  # Production logging and monitoring stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

volumes:
  redis_prod_data:
    driver: local
  postgres_prod_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    driver: bridge
    name: legacy-coin-trader-prod-network
