import importlib
from unittest.mock import patch

import numpy as np
import pandas as pd


MOMENTUM_MODULE = importlib.import_module("crypto_bot.strategy.momentum_exploiter")

NORMALIZATION_CONFIG = {
    "lookback": 20,
    "momentum_window": 8,
    "volume_zscore_threshold": -1.0,
    "threshold": 0.0,
    "min_atr_pct": 0.0001,
    "momentum_threshold": 0.002,
    "acceleration_threshold": 0.0005,
    "rsi_window": 8,
}


def _build_momentum_frame(factor: float) -> pd.DataFrame:
    periods = 120
    index = pd.date_range("2024-01-01", periods=periods, freq="min")

    close = 100 + np.linspace(0, 8, periods)
    close[-30:] += np.linspace(0, 10, 30)
    open_ = np.concatenate(([close[0]], close[:-1]))

    range_base = np.full(periods, 0.6)
    range_base[-20:] = range_base[-20:] * factor
    high = close + range_base
    low = close - range_base

    volume = np.full(periods, 700.0)
    volume += np.linspace(0, 80, periods)
    volume[-10:] += np.linspace(150, 450, 10)

    return pd.DataFrame(
        {
            "open": open_,
            "high": high,
            "low": low,
            "close": close,
            "volume": volume,
        },
        index=index,
    )


def _score_without_normalization(df: pd.DataFrame) -> tuple[float, str]:
    with patch.object(
        MOMENTUM_MODULE,
        "normalize_score_by_volatility",
        side_effect=lambda data, score, *args, **kwargs: score,
    ):
        return MOMENTUM_MODULE.generate_signal(df, config=NORMALIZATION_CONFIG)


def test_momentum_exploiter_normalization_responds_to_volatility():
    low_df = _build_momentum_frame(0.5)
    high_df = _build_momentum_frame(2.0)

    raw_low, dir_low_raw = _score_without_normalization(low_df)
    raw_high, dir_high_raw = _score_without_normalization(high_df)

    score_low, dir_low = MOMENTUM_MODULE.generate_signal(low_df, config=NORMALIZATION_CONFIG)
    score_high, dir_high = MOMENTUM_MODULE.generate_signal(high_df, config=NORMALIZATION_CONFIG)

    assert dir_low_raw == dir_high_raw == "long"
    assert dir_low == dir_high == "long"

    assert abs(raw_low - raw_high) < 1e-6
    assert score_low < raw_low
    assert score_high > raw_high
    assert score_high > score_low
